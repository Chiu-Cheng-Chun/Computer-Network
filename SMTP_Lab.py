# -*- coding: utf-8 -*-
"""
Created on Wed Nov 14 19:55:30 2018

@author: craig
"""
import socket, ssl

def main():
    msg = "I love computer networks!\r\n"
    endmsg = "\r\n.\r\n"
    picture = "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tSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDUkqgAAGpJVAAAtSQqAIBaEhUAQC2JCgCglkQFAFBLogIAqCVRAQDU+du//f9+gG00xtKe9gAAAABJRU5ErkJggg=="
    
    mailserver = 'smtp.gmail.com'
    clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    clientSocket.connect((mailserver, 587))
    recv = clientSocket.recv(1024)
    print(recv)
    
    #Send HELO command and print server response
    heloCommand = 'HELO Alice\r\n'
    clientSocket.send(heloCommand.encode())
    recv1 = clientSocket.recv(1024)
    print(recv1)
    
    #Send MAIL FROM command and print server response.
    command = "STARTTLS\r\n"
    clientSocket.send(command.encode())
    recvdiscard = clientSocket.recv(1024)
    print(recvdiscard)
    
    #wrap socket by ssl
    clientSocket = ssl.wrap_socket(clientSocket, ssl_version=ssl.PROTOCOL_TLSv1) 
    
    #Authentication
    clientSocket.send('AUTH LOGIN\r\n'.encode())
    recv1 = clientSocket.recv(1024)
    print(recv1)
    clientSocket.send('XXXXXXXXXXX\r\n'.encode()) #避免資訊流出所以我拿掉我的帳密的base64
    recv1 = clientSocket.recv(1024)
    print(recv1)
    clientSocket.send('AAAAAABBBBBBBB\r\n'.encode())
    recv1 = clientSocket.recv(1024)
    print(recv1)
    
#----------------------------------------------------------------------------------------------------
        
    # Send MAIL FROM command and print server response.
    clientSocket.send('Mail FROM: <craigchiu0619@gmail.com>\r\n'.encode())#craigchiu0619@gmail.com
    recv = clientSocket.recv(1024)
    print(recv)
        
    # Send RCPT TO command and print server response.
    clientSocket.send('RCPT TO: <craigchiu0619@gmail.com>\r\n'.encode())#105503010@cc.ncu.edu.tw
    recv = clientSocket.recv(1024)
    print(recv)
    
    # Send DATA command and print server response.
    clientSocket.send('DATA\r\n'.encode())
    recv = clientSocket.recv(1024)
    print(recv)
    
    # Send title.
    clientSocket.send('Subject:Lab Exercise\r\n'.encode())
    clientSocket.send('MIME-Version:1.0\r\n'.encode())
    clientSocket.send('Content-type: multipart/mixed; boundary="this_is_a_boundary"\r\n'.encode())
    
    # Send message data.
    clientSocket.send('--this_is_a_boundary\r\n'.encode())
    clientSocket.send(msg.encode())
    clientSocket.send('--this_is_a_boundary\r\n'.encode())
    clientSocket.send('Content-Type:image/png;name=emaul圖.png\r\n'.encode())
    clientSocket.send('Content-Transfer-Encoding: base64\r\n'.encode())
    clientSocket.send('Content-Disposition:attachment;filename=emaul圖.png\r\n'.encode())
    clientSocket.send(picture.encode())

    # Message ends with a single period.
    clientSocket.send(endmsg.encode())
    
    # Send QUIT command and get server response.
    clientSocket.send('QUIT\r\n'.encode())
    
    clientSocket.close() #close the socket

if __name__ == '__main__':
    main()
    
    